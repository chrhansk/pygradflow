import numpy as np
import pytest

from pygradflow.integration.integration_solver import IntegrationSolver
from pygradflow.params import Params, PenaltyUpdate, StepControlType
from pygradflow.solver import Solver

from .linprog import LinearProgram


@pytest.fixture
def linprog():
    A = np.array(
        [
            [9.51056516e-01, 6.90983006e-01],
            [-3.63271264e-01, 1.11803399e00],
            [-1.17557050e00, 2.22044605e-16],
            [-3.63271264e-01, -1.11803399e00],
            [9.51056516e-01, -6.90983006e-01],
            [-2.17234844e-01, 1.07058388e00],
            [-7.11984239e-02, 1.02313377e00],
            [7.48379961e-02, 9.75683661e-01],
            [2.20874416e-01, 9.28233552e-01],
            [3.66910836e-01, 8.80783443e-01],
            [5.12947256e-01, 8.33333333e-01],
            [6.58983676e-01, 7.85883224e-01],
            [8.05020096e-01, 7.38433115e-01],
            [-1.08531503e00, 1.24225999e-01],
            [-9.95059562e-01, 2.48451997e-01],
            [-9.04804091e-01, 3.72677996e-01],
            [-8.14548620e-01, 4.96903995e-01],
            [-7.24293149e-01, 6.21129994e-01],
            [-6.34037678e-01, 7.45355992e-01],
            [-5.43782206e-01, 8.69581991e-01],
            [-4.53526735e-01, 9.93807990e-01],
            [-4.53526735e-01, -9.93807990e-01],
            [-5.43782206e-01, -8.69581991e-01],
            [-6.34037678e-01, -7.45355992e-01],
            [-7.24293149e-01, -6.21129994e-01],
            [-8.14548620e-01, -4.96903995e-01],
            [-9.04804091e-01, -3.72677996e-01],
            [-9.95059562e-01, -2.48451997e-01],
            [-1.08531503e00, -1.24225999e-01],
            [8.05020096e-01, -7.38433115e-01],
            [6.58983676e-01, -7.85883224e-01],
            [5.12947256e-01, -8.33333333e-01],
            [3.66910836e-01, -8.80783443e-01],
            [2.20874416e-01, -9.28233552e-01],
            [7.48379961e-02, -9.75683661e-01],
            [-7.11984239e-02, -1.02313377e00],
            [-2.17234844e-01, -1.07058388e00],
            [9.51056516e-01, 5.37431227e-01],
            [9.51056516e-01, 3.83879448e-01],
            [9.51056516e-01, 2.30327669e-01],
            [9.51056516e-01, 7.67758895e-02],
            [9.51056516e-01, -7.67758895e-02],
            [9.51056516e-01, -2.30327669e-01],
            [9.51056516e-01, -3.83879448e-01],
            [9.51056516e-01, -5.37431227e-01],
        ]
    )

    b = np.array(
        [
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
            0.95105652,
        ]
    )

    c = np.array([0.0, 0.1])

    return LinearProgram(A, b, c)


@pytest.fixture
def x0():
    return np.array([0.0, 0.5])


@pytest.fixture
def y0():
    return 0.0


def test_solve_with_recovery(linprog, x0, y0):
    params = Params(
        collect_path=True,
        rho=1e-1,
        step_control_type=StepControlType.ResiduumRatio,
        penalty_update=PenaltyUpdate.Constant,
    )

    solver = Solver(linprog, params)

    result = solver.solve(x0, y0)

    import matplotlib.pyplot as plt

    primal_path = result.primal_path

    path_x = primal_path[0, :]
    path_y = primal_path[1, :]

    # plt.plot(path_x, path_y, "o-")
    # plt.show()

    # import pdb

    # pdb.set_trace()

    assert result.success
